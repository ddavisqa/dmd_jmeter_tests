<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NODE_SERVER" elementType="Argument">
            <stringProp name="Argument.name">NODE_SERVER</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Linked Dataview and TTL Test Group-----------------------------------" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1428947466000</longProp>
        <longProp name="ThreadGroup.end_time">1428947466000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate DVD Name" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;ordersdvd&quot;);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : DELETE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : CREATE Linked ordersdvd" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;ordersdvd&quot;,&#xd;
  &quot;info&quot;: &quot;Group on CategoryID and provide a count of CategoryID&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;PT60S&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
   &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sa&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;query&quot;: &quot;SELECT * FROM orders&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [&#xd;
  ],&#xd;
  &quot;ends&quot;: [&#xd;
     {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ ordersdvd" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/ordersdvd/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-593084212">      10248,
      &quot;VINET&quot;,
      5,
      &quot;1996-07-04&quot;,
      &quot;1996-08-01&quot;,
      &quot;1996-07-16&quot;,
      3,
      32.3800011,
      &quot;Vins et alcools Chevalier&quot;,
      &quot;59 rue de l&apos;Abbaye&quot;,
      &quot;Reims&quot;,
      null,
      &quot;51100&quot;,
      &quot;France&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">rc: 15</stringProp>
            <stringProp name="filename">assertLib.js</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script"></stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked productsdvd" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;productsdvd&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;P1W&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
    &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sa&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;query&quot;: &quot;products&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/productsdvd</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ productsdvd" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/productsdvd/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2112702024">      &quot;name&quot;: &quot;ProductName&quot;,
      &quot;dataType&quot;: &quot;Text&quot;
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked testEmptydvd" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;testEmptydvd&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;1&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
    &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sa&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;table&quot;: &quot;testEmpty&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testEmptydvd</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ testEmptydvd" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testEmptydvd/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">MD5</stringProp>
            <stringProp name="RegexExtractor.regex">.*</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <MD5HexAssertion guiclass="MD5HexAssertionGUI" testclass="MD5HexAssertion" testname="MD5Hex Assertion" enabled="false">
            <stringProp name="MD5HexAssertion.size">89e90b1d9885a26b921e36bc80bddefa</stringProp>
          </MD5HexAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">_${DVD_NAME}.md5</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <stringProp name="FileSaver.variablename">${DVD_NAME}</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked testDiffNull" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;testDiffNull&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;PT10M&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
    &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sa&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;table&quot;: &quot;testDiffNull&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 30&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testDiffNull</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ testDiffNull" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">25</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testDiffNull/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">MD5</stringProp>
            <stringProp name="RegexExtractor.regex">.*</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <MD5HexAssertion guiclass="MD5HexAssertionGUI" testclass="MD5HexAssertion" testname="MD5Hex Assertion" enabled="false">
            <stringProp name="MD5HexAssertion.size">89e90b1d9885a26b921e36bc80bddefa</stringProp>
          </MD5HexAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">_${DVD_NAME}.md5</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <stringProp name="FileSaver.variablename">${DVD_NAME}</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked DVD with bad credentials so that the linked dvd gets the error message returned without giving login credentials" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;badcredential&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;1&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
    &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sas&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;table&quot;: &quot;products&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/badcredential</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ products table verify that the user credential is bad" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/badcredential/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2112702024">      &quot;name&quot;: &quot;ProductName&quot;,
      &quot;dataType&quot;: &quot;Text&quot;
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">MD5</stringProp>
            <stringProp name="RegexExtractor.regex">.*</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <MD5HexAssertion guiclass="MD5HexAssertionGUI" testclass="MD5HexAssertion" testname="MD5Hex Assertion" enabled="false">
            <stringProp name="MD5HexAssertion.size">89e90b1d9885a26b921e36bc80bddefa</stringProp>
          </MD5HexAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">_${DVD_NAME}.md5</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <stringProp name="FileSaver.variablename">${DVD_NAME}</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked DVD to DVD with bad credentials" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;testbc&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;1&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&quot;type&quot;:&quot;dataview&quot;,&#xd;
    &quot;dataview&quot;:&quot;badcredential&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testbc</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ products verify that the user credential fails on linked reading" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/testbc/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2112702024">      &quot;name&quot;: &quot;ProductName&quot;,
      &quot;dataType&quot;: &quot;Text&quot;
</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">MD5</stringProp>
            <stringProp name="RegexExtractor.regex">.*</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <MD5HexAssertion guiclass="MD5HexAssertionGUI" testclass="MD5HexAssertion" testname="MD5Hex Assertion" enabled="false">
            <stringProp name="MD5HexAssertion.size">89e90b1d9885a26b921e36bc80bddefa</stringProp>
          </MD5HexAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">_${DVD_NAME}.md5</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <stringProp name="FileSaver.variablename">${DVD_NAME}</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : Execute  Table Linked DVD to DVD with bad credentials" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;testbc&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;1&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&quot;type&quot;:&quot;dataview&quot;,&#xd;
    &quot;dataview&quot;:&quot;badcredential&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATAVIEW : PUT  Table Linked badstarter" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;badstarter&quot;,&#xd;
  &quot;info&quot;: &quot;Group Distinct Updated to Group Count&quot;,&#xd;
  &quot;debug&quot; : &quot;d_dvd,d_datalayer,d_jsonresult&quot;,&#xd;
  &quot;ttl&quot;: &quot;1&quot;,&#xd;
  &quot;starts&quot;: [&#xd;
    {&#xd;
    	 &quot;name&quot;: &quot;zzz&quot;,&#xd;
      &quot;type&quot;: &quot;sql&quot;,&#xd;
    &quot;connection&quot;: {&#xd;
   	   &quot;type&quot;:&quot;jdbc&quot;,&#xd;
        &quot;driver&quot;: &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&#xd;
        &quot;url&quot;: &quot;jdbc:sqlserver://QASQL2K8:1433000;databaseName=NGP&quot;,&#xd;
        &quot;user&quot;: &quot;sa&quot;,&#xd;
        &quot;password&quot;: &quot;LGXpass&quot;&#xd;
      },&#xd;
      &quot;table&quot;: &quot;orders&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [],&#xd;
  &quot;ends&quot;: [&#xd;
    {&#xd;
      &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;skip&quot;: 0,&#xd;
            &quot;top&quot;: 10&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/badstarter</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP : DATA : READ badstarter cause error" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="$skip" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$skip</stringProp>
              </elementProp>
              <elementProp name="$top" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">$top</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/badstarter/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
            <stringProp name="FileSaver.filename">C:\data\Jmeter_Results\\${DVD_NAME}.json</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">false</boolProp>
            <stringProp name="FileSaver.numberPadLen">1</stringProp>
            <boolProp name="FileSaver.addTimstamp">true</boolProp>
            <stringProp name="FileSaver.variablename">DVD_NAME</stringProp>
          </ResultSaver>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">MD5</stringProp>
            <stringProp name="RegexExtractor.regex">.*</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <MD5HexAssertion guiclass="MD5HexAssertionGUI" testclass="MD5HexAssertion" testname="MD5Hex Assertion" enabled="false">
            <stringProp name="MD5HexAssertion.size">89e90b1d9885a26b921e36bc80bddefa</stringProp>
          </MD5HexAssertion>
          <hashTree/>
          <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
            <stringProp name="FileSaver.filename">_${DVD_NAME}.md5</stringProp>
            <boolProp name="FileSaver.errorsonly">false</boolProp>
            <boolProp name="FileSaver.skipautonumber">false</boolProp>
            <boolProp name="FileSaver.skipsuffix">false</boolProp>
            <boolProp name="FileSaver.successonly">true</boolProp>
            <stringProp name="FileSaver.variablename">${DVD_NAME}</stringProp>
          </ResultSaver>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">C:\data\Jmeter_Tests\NGP_ALL_DVD_Test_MSSQL_OperationsGroupDistinctGroupCount.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LogiAnalytics Expression Grammar Functions STRING LOGICAL MISC CONVERSION" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="CONVERSION Calculated Columns - 2651" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Products</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
{ &quot;expression&quot;: &quot;TRIM(&apos; this is trimmed &apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;trimFunc&quot;&#xd;
    },&#xd;
&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;CONTAINS(&apos;HELLO&apos;, &apos;HELL&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;containsFunc&quot;&#xd;
    },&#xd;
&#xd;
{&#xd;
      &quot;expression&quot;: &quot;STR(&apos;-100&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;INT_TO_DATETIME(1111111112)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;intToDateTimeFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;STR_TO_LONG(&apos;20010201&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strToLongFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;STR_TO_DECIMAL(&apos;20010201&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strToDecimalFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;STR_TO_BOOLEAN(&apos;true&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strToBooleanFunc1&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;STR_TO_BOOLEAN(&apos;FALSE&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strToBooleanFunc2&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;STR_JOIN(&apos;blah&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;strJoinFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;TRIM_JOIN(&apos;blah&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;trimJoinFunc&quot;&#xd;
    },&#xd;
&#xd;
   {&#xd;
      &quot;expression&quot;: &quot;HEATMAP_1(1,2,3,4)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;headmapFunc&quot;&#xd;
    },&#xd;
  {&#xd;
      &quot;expression&quot;: &quot;MULTIPART_PART_STR(&apos;blah&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;mutipartPartFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;BOOLEAN_STR(&apos;blah&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;booleanStrFunc&quot;&#xd;
    },&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="STRING  Calculated Columns - 2651" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [    {&#xd;
    	&quot;expression&quot; : &quot;CONCATENATE([ShipVia], &apos;-------&apos;, [Freight])&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;concatenateFunc&quot;&#xd;
    },  {&#xd;
    	&quot;expression&quot; : &quot;LEN(&apos;str1&apos;)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;lenFunc&quot;&#xd;
    }, {&#xd;
    	&quot;expression&quot; : &quot;LOWER(&apos;LOWCASE&apos;)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;lowerFunc&quot;&#xd;
    }, {&#xd;
    	&quot;expression&quot; : &quot;MID(&apos;MIDDLE&apos;, 2, 4)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;midFunc&quot;&#xd;
    }, {&#xd;
    	&quot;expression&quot; : &quot;RIGHT(&apos;RIGHT&apos;, 2)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;rightFunc&quot;&#xd;
    }, {&#xd;
    	&quot;expression&quot; : &quot;TRIM(&apos; this is trimmed &apos;)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;trimFunc&quot;&#xd;
    }, {&#xd;
    	&quot;expression&quot; : &quot;UPPER(&apos;uppercased&apos;)&quot;,&#xd;
    	&quot;type&quot; : &quot;calculation&quot;,&#xd;
    	&quot;alias&quot; : &quot;upperFunc&quot;&#xd;
    },&#xd;
        {&#xd;
      &quot;expression&quot;: &quot;INSERT(&apos;DAMIEN&apos;, 2, 3, &apos;under&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;insertFunc&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;LEFT(&apos;str1&apos;, 2)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;leftFunc&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename">C:\data\Jmeter_Results\Function_logs\String_DATAACQ_2857_Functions_MultiDB_Test Plan.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="LOGICAL  Calculated Columns - 2651" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
    {      &quot;expression&quot;: &quot;CONTAINS(&apos;HELLO&apos;, &apos;HELL&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;containsFunc&quot;    },&#xd;
&#xd;
    {      &quot;expression&quot;: &quot;INLIST(2,2,3,4)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;inlisteFunc&quot;    },&#xd;
    {      &quot;expression&quot;: &quot;ISNULL(4&gt;5)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;isnull_yes_Func&quot;    },&#xd;
          {      &quot;expression&quot;: &quot;ISNULL(4&gt;5)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;isnull_no_Func&quot;    }&#xd;
   &#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[5]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename">C:\data\Jmeter_Results\Function_logs\Logical_DATAACQ_2857_Functions_MultiDB_Test Plan.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[5]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="MISC  Calculated Columns - 2651" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;top&quot;: 5&#xd;
        },&#xd;
&#xd;
          {&quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;:&quot;ResultSet&quot;,&#xd;
	  &quot;expression&quot;: &quot;([Freight] + 10 - SQL_FUNCTION(\&quot;ABS([Freight]\&quot;))) &lt;= 15&quot;&#xd;
         },&#xd;
&#xd;
             {&#xd;
			&quot;type&quot;: &quot;group&quot;,&#xd;
			&quot;keepDetail&quot;: true,&#xd;
			&quot;columns&quot;: [{&#xd;
				&quot;name&quot;: &quot;[Freight]&quot;&#xd;
			}],&#xd;
			&quot;aggregationColumns&quot;: [{&#xd;
				&quot;name&quot;: &quot;[Freight]&quot;,&#xd;
				&quot;alias&quot;: &quot;orders_max&quot;,&#xd;
				&quot;aggregation&quot;: &quot;max&quot;&#xd;
			}]&#xd;
		}&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename">C:\data\Jmeter_Results\Function_logs\MISC_DATAACQ_2857_Functions_MultiDB_Test Plan.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DAYOFWEEK with OrderDate and &apos;1976-01-01&apos;" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DAYOFWEEK([OrderDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFWEEKSecond&quot;&#xd;
    },&#xd;
       {&#xd;
      &quot;expression&quot;: &quot;DAYOFWEEK(&apos;1996-07-23&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFWEEKSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(&apos;1996-07-23&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARMinute&quot;&#xd;
    }                 ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DATAACQ 2829 - DS Crashes when Binning Grouping and Sorting" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
   &quot;operations&quot;:[&#xd;
      {&#xd;
         &quot;type&quot;:&quot;bin&quot;,&#xd;
         &quot;column&quot;:{&quot;name&quot;:&quot;Freight&quot;},&#xd;
         &quot;alias&quot;:&quot;Freight_bin&quot;,&#xd;
         &quot;mode&quot;:{&quot;type&quot;:&quot;auto&quot;}&#xd;
      },&#xd;
      {&#xd;
         &quot;type&quot;:&quot;group&quot;,&#xd;
         &quot;columns&quot;:[{&quot;name&quot;:&quot;Freight_bin&quot;}],&#xd;
         &quot;aggregationColumns&quot;:[&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipCountry&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipCountry&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipPostalCode&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipPostalCode&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipRegion&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipRegion&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipCity&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipCity&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipAddress&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipAddress&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipName&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipName&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipVia&quot;,&#xd;
               &quot;aggregation&quot;:&quot;sum&quot;,&#xd;
               &quot;alias&quot;:&quot;ShipVia&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShippedDate&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;ShippedDate&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;RequiredDate&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;RequiredDate&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;OrderDate&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;OrderDate&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;EmployeeID&quot;,&#xd;
               &quot;aggregation&quot;:&quot;sum&quot;,&#xd;
               &quot;alias&quot;:&quot;EmployeeID&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;CustomerID&quot;,&#xd;
               &quot;aggregation&quot;:&quot;count&quot;,&#xd;
               &quot;alias&quot;:&quot;CustomerID&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;OrderID&quot;,&#xd;
               &quot;aggregation&quot;:&quot;sum&quot;,&#xd;
               &quot;alias&quot;:&quot;OrderID&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;Freight_bin_Details&quot;,&#xd;
               &quot;aggregation&quot;:&quot;min&quot;,&#xd;
               &quot;alias&quot;:&quot;Freight_bin_Details&quot;&#xd;
            }&#xd;
         ]&#xd;
      },&#xd;
      {&#xd;
         &quot;type&quot;:&quot;sort&quot;,&#xd;
         &quot;columns&quot;:[&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipAddress&quot;,&#xd;
               &quot;direction&quot;:&quot;desc&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;ShipVia&quot;,&#xd;
               &quot;direction&quot;:&quot;desc&quot;&#xd;
            },&#xd;
            {&#xd;
               &quot;name&quot;:&quot;Freight_bin&quot;,&#xd;
               &quot;direction&quot;:&quot;desc&quot;&#xd;
            }&#xd;
         ]&#xd;
      },&#xd;
      {&#xd;
         &quot;type&quot;:&quot;selectRows&quot;,&#xd;
         &quot;skip&quot;:5,&#xd;
         &quot;top&quot;:50&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DATAACQ  2653 - Filter by Date" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Products</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;selectRows&quot;,&#xd;
      &quot;skip&quot;:0,&#xd;
      &quot;top&quot;:10&#xd;
    },&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;filter&quot;,&#xd;
      &quot;expression&quot;:&quot;(([OrderDate] == &apos;01/17/1994&apos;))&quot;&#xd;
    }&#xd;
  ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - MISC  Calculated Columns - 2651" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;top&quot;: 5&#xd;
        },&#xd;
&#xd;
          {&quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;:&quot;ResultSet&quot;,&#xd;
	  &quot;expression&quot;: &quot;[Freight] + 10.0 - SQL_FUNCTION(\&quot;SIN(Freight)\&quot;)&quot;&#xd;
         }&#xd;
],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[7]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename">C:\data\Jmeter_Results\Function_logs\MISC_DATAACQ_2857_Functions_MultiDB_Test Plan.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[7]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname=" LogiAnalytics Expression Grammar Functions Date Functions" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432156670000</longProp>
        <longProp name="ThreadGroup.end_time">1432156670000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DAYOFWEEK" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
       {&#xd;
      &quot;expression&quot;: &quot;DAYOFWEEK(&apos;1996-07-23&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFWEEKSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(&apos;1996-07-23&apos;)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARMinute&quot;&#xd;
    }                 ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DAYOFMONTH" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFMONTH(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFMONTHYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DAYOFYEAR" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
   &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DAYOFYEAR(1996-07-23)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDAYOFYEARYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DATEDIFF" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(second,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(minute,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(hour,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(day,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(week,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(month,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(quarter,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEDIFF(year,[OrderDate],[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEDIFFYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DATEPART" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DATEPART(second,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DATEPART(minute,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(hour,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(day,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(week,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(month,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(quarter,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEPART(year,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATEPARTYear&quot;&#xd;
    }],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DATENAME" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DATENAME(second,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMESecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DATENAME(minute,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(hour,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(day,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(week,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(month,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(quarter,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATENAME(year,[ShippedDate])&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;PositiveDATENAMEYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller Date Function NOW() and TODAY()" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [  &#xd;
    {&#xd;
      &quot;expression&quot;: &quot;NOW()&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;TheTimeRightNow&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;expression&quot;: &quot;TODAY()&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;TODAYSDATE&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DateAdd Positiver Numbers to Date " enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Products</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [  &#xd;
   &#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DATEADD(SECOND,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DATEADD(MINUTE,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(HOUR,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(DAY,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(WEEK,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(MONTH,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(QUARTER,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(YEAR,20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[10]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[10]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller DateAdd Negative Numbers to Date" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Products</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [ &#xd;
    {&#xd;
      &quot;expression&quot;: &quot;DATEADD(ss,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDSecond&quot;&#xd;
    },&#xd;
	{&#xd;
      &quot;expression&quot;: &quot;DATEADD(mi,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDMinute&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(hh,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDHour&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(dd,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDDay&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(wk,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDWeek&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(mm,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDMonth&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(qq,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDQuarter&quot;&#xd;
    },{&#xd;
      &quot;expression&quot;: &quot;DATEADD(yy,-20,ShippedDate)&quot;,&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;NegativeDATEADDYear&quot;&#xd;
    }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[10]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[10]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Aggregate on Calculated Columns" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432156742000</longProp>
        <longProp name="ThreadGroup.end_time">1432156742000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Aggregate on Calculated Columns - AS 2179 DS 2848" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
	{&quot;type&quot;:&quot;calculation&quot;,&#xd;
	&quot;alias&quot;:&quot;vatax&quot;,&#xd;
	&quot;expression&quot;:&quot;[Freight] * 0.05&quot;&#xd;
	},&#xd;
		{&quot;type&quot;:&quot;calculation&quot;,&#xd;
	&quot;alias&quot;:&quot;total&quot;,&#xd;
	&quot;expression&quot;:&quot;[Freight] * [vatax]&quot;&#xd;
	}	&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Bug 2854 Calculate with .05" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
	{&quot;type&quot;:&quot;calculation&quot;,&#xd;
	&quot;alias&quot;:&quot;vatax&quot;,&#xd;
	&quot;expression&quot;:&quot;[Freight] * .05&quot;&#xd;
	}&#xd;
&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Bin, Aggregate, Calculate the Aggregate with Freight DATAACQ-2855" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
  &quot;name&quot;:&quot;${DVD_NAME}&quot;,&#xd;
  &quot;info&quot;:&quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
  &quot;starts&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;sql&quot;,&#xd;
      &quot;query&quot;:&quot;${QUERY}&quot;,&#xd;
      &quot;connection&quot;:${CONNECTION}&#xd;
    }&#xd;
  ],&#xd;
    &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;myBin&quot;,&#xd;
      &quot;type&quot;: &quot;bin&quot;,&#xd;
      &quot;alias&quot;: &quot;ShipViaBins&quot;,&#xd;
      &quot;mode&quot;: {&#xd;
        &quot;numberOfBins&quot;: 20,&#xd;
        &quot;type&quot;: &quot;auto&quot;&#xd;
      },&#xd;
      &quot;column&quot;: {&#xd;
        &quot;name&quot;: &quot;ShipVia&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;aggregationColumns&quot;: [&#xd;
        {&#xd;
          &quot;alias&quot;: &quot;AverageFrieghtPerShipVia&quot;,&#xd;
          &quot;name&quot;: &quot;Freight&quot;,&#xd;
          &quot;aggregation&quot;: &quot;average&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;type&quot;: &quot;group&quot;,&#xd;
      &quot;columns&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;ShipViaBins&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;FreightTimesAggregate&quot;,&#xd;
      &quot;expression&quot;: &quot;[Freight] * AverageFrieghtPerShipVia&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;ends&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;return&quot;,&#xd;
      &quot;includeMetadata&quot;:{  &#xd;
        &quot;rowCount&quot;:true&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Bin, Aggregate, Calculate the Aggregate with Freight DATAACQ-2856" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
  &quot;name&quot;:&quot;${DVD_NAME}&quot;,&#xd;
  &quot;info&quot;:&quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
  &quot;starts&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;sql&quot;,&#xd;
      &quot;query&quot;:&quot;${QUERY}&quot;,&#xd;
      &quot;connection&quot;:${CONNECTION}&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;myBin&quot;,&#xd;
      &quot;type&quot;: &quot;bin&quot;,&#xd;
      &quot;alias&quot;: &quot;ShipViaBins&quot;,&#xd;
      &quot;mode&quot;: {&#xd;
        &quot;numberOfBins&quot;: 20,&#xd;
        &quot;type&quot;: &quot;auto&quot;&#xd;
      },&#xd;
      &quot;column&quot;: {&#xd;
        &quot;name&quot;: &quot;ShipVia&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;aggregationColumns&quot;: [&#xd;
        {&#xd;
          &quot;alias&quot;: &quot;AverageFrieghtPerShipVia&quot;,&#xd;
          &quot;name&quot;: &quot;Freight&quot;,&#xd;
          &quot;aggregation&quot;: &quot;average&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;type&quot;: &quot;group&quot;,&#xd;
      &quot;columns&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;ShipViaBins&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;FreightTimesAggregate&quot;,&#xd;
      &quot;expression&quot;: &quot;[Freight] * AverageFrieghtPerShipVia&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;ends&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;return&quot;,&#xd;
      &quot;includeMetadata&quot;:{  &#xd;
        &quot;rowCount&quot;:true&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Bin, Aggregate, Calculate the Aggregate with Freight DATAACQ-2857" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
  &quot;name&quot;:&quot;${DVD_NAME}&quot;,&#xd;
  &quot;info&quot;:&quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
  &quot;starts&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;sql&quot;,&#xd;
      &quot;query&quot;:&quot;${QUERY}&quot;,&#xd;
      &quot;connection&quot;:${CONNECTION}&#xd;
    }&#xd;
  ],&#xd;
 &quot;operations&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;myBin&quot;,&#xd;
      &quot;type&quot;: &quot;bin&quot;,&#xd;
      &quot;alias&quot;: &quot;ShipViaBins&quot;,&#xd;
      &quot;mode&quot;: {&#xd;
        &quot;numberOfBins&quot;: 20,&#xd;
        &quot;type&quot;: &quot;auto&quot;&#xd;
      },&#xd;
      &quot;column&quot;: {&#xd;
        &quot;name&quot;: &quot;ShipVia&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;aggregationColumns&quot;: [&#xd;
        {&#xd;
          &quot;alias&quot;: &quot;AverageFrieghtPerShipVia&quot;,&#xd;
          &quot;name&quot;: &quot;Freight&quot;,&#xd;
          &quot;aggregation&quot;: &quot;average&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;type&quot;: &quot;group&quot;,&#xd;
      &quot;columns&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;ShipViaBins&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;: &quot;FreightTimesAggregate&quot;,&#xd;
      &quot;expression&quot;: &quot;[Freight] * [AverageFrieghtPerShipVia]&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;ends&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;return&quot;,&#xd;
      &quot;includeMetadata&quot;:{  &#xd;
        &quot;rowCount&quot;:true&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller - Calculate after Binning [Freight] * [ShipViaBins]" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=LargeNorthwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
  &quot;name&quot;:&quot;${DVD_NAME}&quot;,&#xd;
  &quot;info&quot;:&quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
  &quot;starts&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;sql&quot;,&#xd;
      &quot;query&quot;:&quot;${QUERY}&quot;,&#xd;
      &quot;connection&quot;:${CONNECTION}&#xd;
    }&#xd;
  ],&#xd;
  &quot;operations&quot;:[  &#xd;
    {  &#xd;
      &quot;name&quot;:&quot;myBin&quot;,&#xd;
      &quot;type&quot;:&quot;bin&quot;,&#xd;
      &quot;alias&quot;:&quot;ShipViaBins&quot;,&#xd;
      &quot;mode&quot;:{  &#xd;
        &quot;numberOfBins&quot;:20,&#xd;
        &quot;type&quot;:&quot;auto&quot;&#xd;
      },&#xd;
      &quot;column&quot;:{  &#xd;
        &quot;name&quot;:&quot;ShipVia&quot;&#xd;
      }&#xd;
    },&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;calculation&quot;,&#xd;
      &quot;alias&quot;:&quot;FreightTimesBins&quot;,&#xd;
      &quot;expression&quot;:&quot;[Freight] * [ShipViaBins]&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;ends&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;return&quot;,&#xd;
      &quot;includeMetadata&quot;:{  &#xd;
        &quot;rowCount&quot;:true&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[6]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Andrey Smoke Test (Calc on Calc with Aggregations)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432667350000</longProp>
        <longProp name="ThreadGroup.end_time">1432667350000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Andrey Smoke Test " enabled="true">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
     &quot;operations&quot;: &#xd;
    [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MOD(ABS([Freight]), 1000) * 1000&quot;,&#xd;
            &quot;alias&quot;: &quot;calcTest&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;group&quot;,&#xd;
            &quot;columns&quot;: &#xd;
            [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;ShipCity&quot;&#xd;
                }&#xd;
            ],&#xd;
&#xd;
            &quot;aggregationColumns&quot;: &#xd;
            [&#xd;
                {&#xd;
                    &quot;aggregation&quot;: &quot;average&quot;,&#xd;
                    &quot;name&quot;: &quot;[calcTest]&quot;,&#xd;
                    &quot;alias&quot;: &quot;maxFreightAverage&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MOD(ABS([maxFreightAverage]), 1000)&quot;,&#xd;
            &quot;alias&quot;: &quot;maxFreight&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MAX(ABS([maxFreightAverage] + 100 / 20) + 100 - MOD(MAX(-[maxFreightAverage] - 100, 100), 1), 100)&quot;,&#xd;
            &quot;alias&quot;: &quot;complex&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;filter&quot;,&#xd;
            &quot;expression&quot;: &quot;MAX(ABS([Freight] + 100 / 20) + 100 - MOD(MAX(-[Freight] - 100, 100), 1), 100) &lt;= 10000&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TTL Testing----------------------------------------------&gt;" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1433515458000</longProp>
        <longProp name="ThreadGroup.end_time">1433515458000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TTL Requirement - DATAACQ-545" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432735740000</longProp>
        <longProp name="ThreadGroup.end_time">1432735740000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DATAACQ-545 Dataview Expiration (TTL) - Absolute Timestamp" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate DVD Name" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;TimeoutDVD&quot;);
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set DateTime " enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

// Timestamps for NOW, NOW-10 seconds, NOW+10 seconds

LocalDateTime now = LocalDateTime.now();
LocalDateTime past = now.minusSeconds(15);
LocalDateTime future = now.plusSeconds(15);

System.out.println(&quot;----------------&quot;);
System.out.println(&quot;   Now: &quot;+now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
System.out.println(&quot;  Past: &quot;+past.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
System.out.println(&quot;Future: &quot;+future.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

vars.put(&quot;DATE_TIME_NOW&quot;,now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
vars.put(&quot;DATE_TIME_PAST&quot;,past.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
vars.put(&quot;DATE_TIME_FUTURE&quot;,future.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

vars.put(&quot;DATE_TIME&quot;,vars.get(&quot;DATE_TIME_FUTURE&quot;));

</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments"> 4 second timer</stringProp>
            <stringProp name="ConstantTimer.delay">4000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE @ ${DATE_TIME_FUTURE}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;${DATE_TIME_FUTURE}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTE" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT5S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY  @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))} " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DATAACQ-545 Dataview Expiration (TTL) Linked DVD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate DVD Name" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;TTL&quot;);
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments">    2.5 second timer</stringProp>
            <stringProp name="ConstantTimer.delay">2500</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE A" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_A</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE B" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_B</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE C" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_C</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE A - select * from employees" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;A&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_A&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT60S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE B - selectColumns  LastName, HireDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
        	  &quot;type&quot;: &quot;dataview&quot;,&#xd;
            &quot;dataview&quot;: &quot;${DVD_NAME}_A&quot;,&#xd;
            &quot;name&quot;: &quot;B&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
         {&#xd;
         	   &quot;type&quot;: &quot;selectColumns&quot;,&#xd;
         	   &quot;columns&quot;: [&#xd;
         	        {   &quot;name&quot; : &quot;LastName&quot; },&#xd;
         	        {   &quot;name&quot; : &quot;HireDate&quot; }   &#xd;
         	   ]&#xd;
         }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_B&quot;,&#xd;
    &quot;ttl&quot; : &quot;PT1s&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE C - sort LastName desc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;dataview&quot;,&#xd;
            &quot;dataview&quot;: &quot;${DVD_NAME}_B&quot;,&#xd;
            &quot;name&quot;: &quot;C&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
         {&#xd;
         	     &quot;type&quot;: &quot;sort&quot;,&#xd;
         	     &quot;columns&quot;: [ &#xd;
         	           {&#xd;
         	     	    &quot;name&quot; : &quot;LastName&quot;,&#xd;
         	     	    &quot;direction&quot; : &quot;desc&quot;&#xd;
         	           }&#xd;
         	     ]&#xd;
         }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_C&quot;,&#xd;
    &quot;ttl&quot; : &quot;PT4S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTE" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT5S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY A @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_A/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY B @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_B/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY C @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_C/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DATAACQ-545 Dataview Expiration (TTL) Linked DVD with Update Loop" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate DVD Name" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;TTL&quot;);
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments"> 1.1 second timer</stringProp>
            <stringProp name="ConstantTimer.delay">1100</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE A" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_A</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE B" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_B</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE C" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_C</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE A - select * from employees" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_A&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT30S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE B - selectColumns  LastName, HireDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
        	  &quot;type&quot;: &quot;dataview&quot;,&#xd;
            &quot;dataview&quot;: &quot;${DVD_NAME}_A&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
         {&#xd;
         	   &quot;type&quot;: &quot;selectColumns&quot;,&#xd;
         	   &quot;columns&quot;: [&#xd;
         	        {   &quot;name&quot; : &quot;LastName&quot; },&#xd;
         	        {   &quot;name&quot; : &quot;HireDate&quot; }   &#xd;
         	   ]&#xd;
         }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_B&quot;,&#xd;
    &quot;ttl&quot; : &quot;PT60S&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE C - sort LastName desc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;dataview&quot;,&#xd;
            &quot;dataview&quot;: &quot;${DVD_NAME}_B&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
         {&#xd;
         	     &quot;type&quot;: &quot;sort&quot;,&#xd;
         	     &quot;columns&quot;: [ &#xd;
         	           {&#xd;
         	     	    &quot;name&quot; : &quot;LastName&quot;,&#xd;
         	     	    &quot;direction&quot; : &quot;desc&quot;&#xd;
         	           }&#xd;
         	     ]&#xd;
         }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_C&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT10S&quot;&#xd;
 &#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UPDATE B - selectColumns  LastName, HireDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
        	  &quot;type&quot;: &quot;dataview&quot;,&#xd;
            &quot;dataview&quot;: &quot;${DVD_NAME}_A&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [&#xd;
         {&#xd;
         	   &quot;type&quot;: &quot;selectColumns&quot;,&#xd;
         	   &quot;columns&quot;: [&#xd;
         	        {   &quot;name&quot; : &quot;LastName&quot; },&#xd;
         	        {   &quot;name&quot; : &quot;HireDate&quot; }   &#xd;
         	   ]&#xd;
         }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}_B&quot;,&#xd;
    &quot;ttl&quot; : &quot;PT15S&quot;&#xd;
&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_B</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTE" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT5S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">15</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY A @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_A/query</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY B @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_B/query</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY C @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}_C/query</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DATAACQ-545 Dataview Expiration (TTL) - Relative Duration" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate DVD Name" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;TimeoutDVD&quot;);
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments">10 second timer</stringProp>
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE + 15S" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT15S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">children</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTE" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT5S&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DATAACQ-545 Dataview Expiration (TTL) with JDBCPreprocessor" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1408049095000</longProp>
        <longProp name="ThreadGroup.end_time">1408049095000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">h2pool</stringProp>
          <stringProp name="dbUrl">jdbc:h2:tcp://localhost/LogiDB</stringProp>
          <stringProp name="driver">org.h2.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password"></stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sa</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set  DVD Name" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">// set the DVD name &apos;DVD_NAME&apos; variable
// update it with _NNN every call
//vars.put(&quot;DVD_NAME&quot;, &quot;NLARGEDATA_${__counter(TRUE)}&quot;);

vars.put(&quot;DVD_NAME&quot;, &quot;TimeoutDVD&quot;);
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set DateTime " enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

// Timestamps for NOW, NOW-10 seconds, NOW+10 seconds

LocalDateTime now = LocalDateTime.now();
LocalDateTime past = now.minusSeconds(30);
LocalDateTime future = now.plusSeconds(30);

System.out.println(&quot;----------------&quot;);
System.out.println(&quot;   Now: &quot;+now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
System.out.println(&quot;  Past: &quot;+past.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
System.out.println(&quot;Future: &quot;+future.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

vars.put(&quot;DATE_TIME_NOW&quot;,now.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
vars.put(&quot;DATE_TIME_PAST&quot;,past.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
vars.put(&quot;DATE_TIME_FUTURE&quot;,future.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));

vars.put(&quot;DATE_TIME&quot;,vars.get(&quot;DATE_TIME_NOW&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49590">204</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CREATE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;${DATE_TIME}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Set DVD Timestamp to expired" enabled="true">
          <stringProp name="dataSource">h2pool</stringProp>
          <stringProp name="query">UPDATE dvd 
SET updated = &apos;${DATE_TIME_PAST}&apos; 
WHERE name = &apos;${DVD_NAME}&apos;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXECUTE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;starts&quot;: [&#xd;
        {&#xd;
            &quot;query&quot;: &quot;select * from employees&quot;,&#xd;
            &quot;aaaatable&quot;:&quot;Employee&quot;,&#xd;
             &quot;connection&quot; : {&#xd;
            	&quot;type&quot;: &quot;jdbc&quot;,&#xd;
            	&quot;driver&quot;:&quot;com.mysql.jdbc.Driver&quot;,&#xd;
            	&quot;url&quot;:&quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,&#xd;
            	&quot;user&quot;:&quot;root&quot;,&#xd;
            	&quot;password&quot;:&quot;LGXpass&quot;&#xd;
            },&#xd;
            &quot;type&quot;: &quot;sql&quot;,&#xd;
            &quot;name&quot;: &quot;test&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;ttl&quot;: &quot;PT5S&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="READ @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="READ @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="READ @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QUERY @ ${__BeanShell(new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.S&quot;).format(new Date()))}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Beta Bug Fixes " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432667350000</longProp>
        <longProp name="ThreadGroup.end_time">1432667350000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${NODE_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">3000</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Supported Databases" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DB_1" elementType="Argument">
              <stringProp name="Argument.name">DB_1</stringProp>
              <stringProp name="Argument.value">mysql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_2" elementType="Argument">
              <stringProp name="Argument.name">DB_2</stringProp>
              <stringProp name="Argument.value">sqlserver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_3" elementType="Argument">
              <stringProp name="Argument.name">DB_3</stringProp>
              <stringProp name="Argument.value">postgresql</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_4" elementType="Argument">
              <stringProp name="Argument.name">DB_4</stringProp>
              <stringProp name="Argument.value">vertica</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_5" elementType="Argument">
              <stringProp name="Argument.name">DB_5</stringProp>
              <stringProp name="Argument.value">oracle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DB_6" elementType="Argument">
              <stringProp name="Argument.name">DB_6</stringProp>
              <stringProp name="Argument.value">h2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">  All LOGI supported databases for NGP</stringProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DS-2852 Equality Binning creates duplicate Bins" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Products</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
    &quot;operations&quot;: [  {&#xd;
      &quot;name&quot;: &quot;myBin&quot;,&#xd;
      &quot;type&quot;: &quot;bin&quot;,&#xd;
      &quot;alias&quot;: &quot;UnitsBinned&quot;,&#xd;
      &quot;mode&quot;: {&#xd;
        &quot;numberOfBins&quot;: null,&#xd;
        &quot;type&quot;: &quot;equality&quot;&#xd;
      },&#xd;
      &quot;column&quot;: {&#xd;
        &quot;name&quot;: &quot;[UnitsInStock]&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;MyGroup&quot;,&#xd;
      &quot;type&quot;: &quot;group&quot;,&#xd;
      &quot;keepDetail&quot;: false,&#xd;
      &quot;columns&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;[UnitsBinned]&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;aggregationColumns&quot;: [&#xd;
        {&#xd;
          &quot;name&quot;: &quot;[UnitPrice]&quot;,&#xd;
          &quot;aggregation&quot;: &quot;average&quot;,&#xd;
          &quot;alias&quot;: &quot;AvgUnitPricePerBin&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DS-2877 SelectColumns does not work" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;bin&quot;,&#xd;
      &quot;column&quot;:{  &#xd;
        &quot;name&quot;:&quot;Freight&quot;&#xd;
      },&#xd;
      &quot;alias&quot;:&quot;Freight_bin&quot;,&#xd;
      &quot;mode&quot;:{  &#xd;
        &quot;type&quot;:&quot;auto&quot;&#xd;
      }&#xd;
    },&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;group&quot;,&#xd;
      &quot;keepDetail&quot;:true,&#xd;
      &quot;columns&quot;:[  &#xd;
        {  &#xd;
          &quot;name&quot;:&quot;Freight_bin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;aggregationColumns&quot;:[  &#xd;
        {  &#xd;
          &quot;name&quot;:&quot;ShipRegion&quot;,&#xd;
          &quot;aggregation&quot;:&quot;count&quot;,&#xd;
          &quot;alias&quot;:&quot;ShipRegion&quot;&#xd;
        },&#xd;
        {  &#xd;
          &quot;name&quot;:&quot;Freight_bin_Details&quot;,&#xd;
          &quot;aggregation&quot;:&quot;min&quot;,&#xd;
          &quot;alias&quot;:&quot;Freight_bin_Details&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;selectRows&quot;,&#xd;
      &quot;skip&quot;:0,&#xd;
      &quot;top&quot;:10&#xd;
    }&#xd;
  ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration" reference="../../../../hashTree[4]/ResultCollector[2]/objProp[2]/value"/>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DS-2855 Error constructing query_ must keepDetails=true" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
&#xd;
  &quot;returns&quot;:{  &#xd;
&#xd;
  },&#xd;
  &quot;operations&quot;:[  &#xd;
    {  &#xd;
      &quot;type&quot;:&quot;bin&quot;,&#xd;
      &quot;column&quot;:{  &#xd;
        &quot;name&quot;:&quot;ShipVia&quot;&#xd;
      },&#xd;
      &quot;alias&quot;:&quot;ShipVia_bin&quot;,&#xd;
      &quot;mode&quot;:{  &#xd;
        &quot;type&quot;:&quot;auto&quot;&#xd;
      }&#xd;
    },&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;group&quot;,&#xd;
	  &quot;keepDetail&quot; : true,&#xd;
      &quot;columns&quot;:[  &#xd;
        {  &#xd;
          &quot;name&quot;:&quot;ShipVia_bin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;aggregationColumns&quot;:[  &#xd;
&#xd;
        {  &#xd;
          &quot;name&quot;:&quot;Freight&quot;,&#xd;
          &quot;aggregation&quot;:&quot;avg&quot;,&#xd;
          &quot;alias&quot;:&quot;AvGFreight&quot;&#xd;
        },&#xd;
&#xd;
        {  &#xd;
          &quot;name&quot;:&quot;ShipVia_bin_Details&quot;,&#xd;
          &quot;aggregation&quot;:&quot;min&quot;,&#xd;
          &quot;alias&quot;:&quot;ShipVia_bin_Details&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
			{&#xd;
    		&quot;type&quot; : &quot;calculation&quot;,&#xd;
    		&quot;alias&quot; : &quot;FreightTimesAggregate&quot;,&#xd;
    		&quot;expression&quot; : &quot;[Freight] * [AvGFreight]&quot;&#xd;
    	},&#xd;
    {  &#xd;
      &quot;type&quot;:&quot;selectRows&quot;,&#xd;
      &quot;skip&quot;:0,&#xd;
      &quot;top&quot;:10000&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DS-1436" enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/ngp_qanorthwind&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;dba&quot;,
     &quot;password&quot;:&quot;dbavertica&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM age</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
&quot;operations&quot;: [&#xd;
	 {&#xd;
		&quot;type&quot;: &quot;selectColumns&quot;,&#xd;
		&quot;columns&quot;: [{&#xd;
			&quot;name&quot;: &quot;M_Name&quot;,&#xd;
			&quot;alias&quot;:&quot;12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;alias&quot;: &quot;Home&quot;,&#xd;
			&quot;name&quot;: &quot;State&quot;&#xd;
		},&#xd;
		{&#xd;
			&quot;alias&quot;: &quot;Yearly_Salary&quot;,&#xd;
			&quot;name&quot;: &quot;Income&quot;&#xd;
		}]&#xd;
	}&#xd;
	 ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="DS-2663 KeepDetail with carry the column causes ambiguous column reading" enabled="true">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
  &quot;operations&quot;: [&#xd;
          {&#xd;
            &quot;type&quot;: &quot;selectRows&quot;,&#xd;
            &quot;top&quot;: 5&#xd;
        },		       &#xd;
  	    {&#xd;
      &quot;type&quot;: &quot;calculation&quot;,&#xd;
      &quot;alias&quot;:&quot;ResultSet&quot;,&#xd;
	  &quot;expression&quot;: &quot;[Freight] + 10 - SQL_FUNCTION(\&quot;LOG(Freight,3)\&quot;)&quot;&#xd;
         },&#xd;
          {&quot;type&quot;: &quot;filter&quot;,&#xd;
      &quot;alias&quot;:&quot;None&quot;,&#xd;
	  &quot;expression&quot;: &quot;SQL_FUNCTION(\&quot;ABS(Freight) &lt;= 15\&quot;)&quot;&#xd;
         },&#xd;
         {&#xd;
			&quot;type&quot;: &quot;group&quot;,&#xd;
			&quot;keepDetail&quot;: true,&#xd;
			&quot;columns&quot;: [{&#xd;
				&quot;name&quot;: &quot;[Freight]&quot;&#xd;
			}],&#xd;
			&quot;aggregationColumns&quot;: [{&#xd;
				&quot;name&quot;: &quot;[Freight]&quot;,&#xd;
				&quot;alias&quot;: &quot;orders_max&quot;,&#xd;
				&quot;aggregation&quot;: &quot;max&quot;&#xd;
			}]&#xd;
		}&#xd;
  ],&#xd;
  &quot;ends&quot;: []&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Andrey Smoke Test " enabled="false">
          <stringProp name="ForeachController.inputVal">DB</stringProp>
          <stringProp name="ForeachController.returnVal">CONNECTION_TYPE</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set DVD Name" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">TEST_001</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Set Dataview Definition Name 

vars.put(&quot;DVD_NAME&quot;, args[0]);
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Connection Block from Type" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">${CONNECTION_TYPE}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Build CONNECTION from CONNECTION_TYPE

var mysql_conn = 
{
     type : &quot;jdbc&quot;,
     driver: &quot;com.mysql.jdbc.Driver&quot;,
     url: &quot;jdbc:mysql://QaMySql/qanorthwind_info&quot;,
     user: &quot;root&quot;,
     password: &quot;LGXpass&quot;	  
};
var sqlserver_conn = 
{
     type: &quot;jdbc&quot;,
	driver:&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,
     url:&quot;jdbc:sqlserver://QASQL2K8:1433;databaseName=NGP&quot;,
     user:&quot;sa&quot;,
     password:&quot;LGXpass&quot; 
};
var postgresql_conn =  
{
	type: &quot;jdbc&quot;,
	driver: &quot;org.postgresql.Driver&quot;,
	url: &quot;jdbc:postgresql://qamysql.logixml.local:6432/qanorthwind_cs&quot;,
	user: &quot;postgres&quot;,
	password: &quot;LGXpass&quot;
};
var vertica_conn = 
{
     &quot;type&quot;: &quot;jdbc&quot;,
     &quot;driver&quot;:&quot;com.vertica.jdbc.Driver&quot;,
     &quot;url&quot;:&quot;jdbc:vertica://qavertica.logixml.local:5433/vmart&quot;,
     &quot;user&quot;:&quot;northwind&quot;,
     &quot;password&quot;:&quot;lgxadmin&quot;

};
var oracle_conn = 
{
	type: &quot;jdbc&quot;,
	driver: &quot;oracle.jdbc.driver.OracleDriver&quot;,
     url: &quot;jdbc:oracle:thin:@//QAORACLE11G.logixml.local/LOGIXML&quot;,
     user: &quot;northwindqa_cs&quot;,
     password: &quot;NorthwindQA_CS&quot;           	            
};
var h2_conn = 
{
	type: &quot;jdbc&quot;,
     driver:&quot;org.h2.Driver&quot;,
     url:&quot;jdbc:h2:tcp://localhost/Northwind&quot;,
     user:&quot;sa&quot;,
     password:&quot;&quot;
};

var connList = {};

connList[&apos;mysql&apos;] = mysql_conn;
connList[&apos;sqlserver&apos;] = sqlserver_conn;
connList[&apos;postgresql&apos;] = postgresql_conn;
connList[&apos;vertica&apos;] = vertica_conn;
connList[&apos;oracle&apos;] = oracle_conn;
connList[&apos;h2&apos;] = h2_conn; 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var conn = JSON.stringify(connList[args[0]]);

vars.put(&apos;CONNECTION&apos;,conn);


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set Query" enabled="true">
            <stringProp name="scriptLanguage">js</stringProp>
            <stringProp name="parameters">SELECT * FROM Orders</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">
// Reformat and set QUERY for CONNECTION_TYPE 

var ctx = org.apache.jmeter.threads.JMeterContextService.getContext();
var vars = ctx.getVariables();

var connFlags = {};
connFlags[&apos;mysql&apos;] = { quoteIdentifiers: true, quoteChar: &quot;`&quot;, caseFlag : 0 };
connFlags[&apos;sqlserver&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;postgresql&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;vertica&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };
connFlags[&apos;oracle&apos;] = { quoteIdentifiers: true, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 1 };
connFlags[&apos;h2&apos;] = { quoteIdentifiers: false, quoteChar: &apos;\\\&quot;&apos;, caseFlag : 0 };

var quoteIdentifiers = false;
var caseFlag = 0;    // leavealone = 0, upcase = 1, downcase = -1, camelcase = ?  

var type = vars.get(&quot;CONNECTION_TYPE&quot;);

quoteIdentifiers = connFlags[type].quoteIdentifiers;
quoteChar = connFlags[type].quoteChar;
caseFlag = connFlags[type].caseFlag;

log.info(&quot;connection: &quot;+type);
log.info(  &quot;quoteIdentifiers: &quot;+quoteIdentifiers);
log.info(&quot;  quoteChar: &quot;+quoteChar);
log.info(&quot;  caseFlag: &quot;+caseFlag);

function fixIdent(idname,quote,quoteChar,caseflag) {

     var id;
	switch (caseflag) {

		case 0:  // leave alone
		    id = idname;
		    break;
		case 1: // upcase
		    id = idname.toUpperCase();
		    break;
	     case -1: // downcase
	         id = idname.toLowerCase();
	         break;
	     default:
	         id = idname;
	         break;
	     
	}

	if (quote) {
		id = quoteChar + id + quoteChar;
	}
	return id;
}

//var query = &quot;Select \\&quot;ProductName\\&quot;,\\&quot;CategoryID\\&quot;,\\&quot;UnitPrice\\&quot; FROM \\&quot;Products\\&quot; &quot;;
var query = Parameters; 

if (quoteIdentifiers) {

	var toks = query.split(&quot; &quot;);
	var identifiers = toks[1];
     var ids;

     var wildcard_ids = identifiers == &quot;*&quot;;

     var q = &quot;SELECT &quot;;
     
	if (wildcard_ids) {
	   ids = &quot; * &quot;;	   
	} else {
        ids = identifiers.split(&quot;,&quot;);
	}

	var table = toks[3];

	
     if (wildcard_ids) {

       q = q + ids;
     } else {
        var i=0;
	   for (i=0; i&lt;ids.length-1; i++) {

		 q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)+&quot;,&quot;;
		
	   }
	   q = q + fixIdent(ids[i],quoteIdentifiers,quoteChar,caseFlag)
     }
	q = q + &quot; FROM &quot; + fixIdent(table,quoteIdentifiers,quoteChar,caseFlag);

	log.info(&quot;NEW query: &apos;&quot;+q+&quot;&apos;&quot;);
     query = q;
	
}



vars.put(&apos;QUERY&apos;,query);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="►   ${__uppercase(${CONNECTION_TYPE})}" enabled="true">
            <stringProp name="TestPlan.comments">   Emit Database Type</stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
ResponseCode = 200;
ResponseMessage=&quot;Using DB:  ${CONNECTION_TYPE}&quot;;</stringProp>
            <stringProp name="scriptLanguage">js</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : DELETE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49590">204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : CREATE " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${DVD_NAME}&quot;,&#xd;
    &quot;info&quot;: &quot;Group on CategoryID and provide a max UnitPrice&quot;,&#xd;
    &quot;starts&quot;: [&#xd;
        {  &quot;type&quot; : &quot;sql&quot;,&#xd;
           &quot;query&quot; : &quot;${QUERY}&quot;,&#xd;
           &quot;connection&quot; : ${CONNECTION}&#xd;
        }&#xd;
    ],&#xd;
     &quot;operations&quot;: &#xd;
    [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MOD(ABS([Freight]), 1000) * 1000&quot;,&#xd;
            &quot;alias&quot;: &quot;calcTest&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;group&quot;,&#xd;
            &quot;columns&quot;: &#xd;
            [&#xd;
                {&#xd;
                    &quot;name&quot;: &quot;ShipCity&quot;&#xd;
                }&#xd;
            ],&#xd;
&#xd;
            &quot;aggregationColumns&quot;: &#xd;
            [&#xd;
                {&#xd;
                    &quot;aggregation&quot;: &quot;average&quot;,&#xd;
                    &quot;name&quot;: &quot;[calcTest]&quot;,&#xd;
                    &quot;alias&quot;: &quot;maxFreightAverage&quot;&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MOD(ABS([maxFreightAverage]), 1000)&quot;,&#xd;
            &quot;alias&quot;: &quot;maxFreight&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;calculation&quot;,&#xd;
            &quot;expression&quot;: &quot;MAX(ABS([maxFreightAverage] + 100 / 20) + 100 - MOD(MAX(-[maxFreightAverage] - 100, 100), 1), 100)&quot;,&#xd;
            &quot;alias&quot;: &quot;complex&quot;&#xd;
        },&#xd;
&#xd;
        {&#xd;
            &quot;type&quot;: &quot;filter&quot;,&#xd;
            &quot;expression&quot;: &quot;MAX(ABS([Freight] + 100 / 20) + 100 - MOD(MAX(-[Freight] - 100, 100), 1), 100) &lt;= 10000&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;ends&quot;: [&#xd;
        {&#xd;
            &quot;type&quot;: &quot;return&quot;,&#xd;
            &quot;includeMetadata&quot;: {&#xd;
                &quot;rowCount&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  DataView : READ" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="     ◦  Data : QUERY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/logiapi/dataservice/dataviews/${DVD_NAME}/query</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = true" enabled="false">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:11 rc:77</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion KEEPDETAIL = false" enabled="true">
              <stringProp name="scriptLanguage">js</stringProp>
              <stringProp name="parameters">cc:2 rc:8</stringProp>
              <stringProp name="filename">assertLib.js</stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <objProp>
              <name></name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <boolProp name="useGroupName">true</boolProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
